declare module '@gezhi/tide-process-bpmn-executor' {
  export interface IVariableContainer {
    id: string;
    instanceId: number;
    parentProcessIndex?: string;
    parentProcessId?: string;
    variables?: any;
    parent?: VariableContainer;
  }

  interface Org {
    $class?: string;
    affiliation: string;
    mspId: string;
    name: string;
    ancestorOrgs: Org[] | string[];
    fullyTrustedOrgs: Org[] | string[];
 }
 
 interface User {
    $class?: string;
    id: string;
    name: string;
    org: Org | string;
    roles: string[];
    internalName?: string;
    subRole?: string;
    metadata?: any;
 }

  /**
  * Each VariableContainer contains the variables in a bpmn:Process/bpmn:SubProcess "instance".
  * Each VariableContainer has its unique identifier, which is a combination of id, instanceId, parentProcessId and parentProcessIndex.
  * Each VariableContainer is linked to a parent VariableContainer and an array of child VariableContainers
  *
  * @export
  * @class
  */
  class VariableContainer {
    private id: string;
    private parentProcessIndex: string;
    private parentProcessId: string;
    private instanceId: number;
    private index: string;
    private children;
    private parent;
    private variables;
    constructor(options: IVariableContainer);
    static fromJSON(persistance: any): VariableContainer;
    /**
     * Given a SubProcess id, and its index, find the VariableContainer for this SubProcess
     *
     * @param {string} id
     * @param {string} index
     * @return {VariableContainer} return null if not found
     */
    findChild(id: string, index: string): VariableContainer;
    get(key: string): any;
    set(key: string, value: any): void;
    toJSON(): any;
    private addChild;
  }

  type EVENT_TYPE = 'start' | 'stop';

  interface ILaneChild {
    type: string;
    id: string;
    name: string;
  }

  interface ILane {
    id: string;
    name: string;
    type: string;
    children: ILaneChild[];
  }

  /**
   * Context
   */
  class Context {
      varCtx(id?: string, index?: string): VariableContainer;
      getLanes(): Promise<ILane[]>;
      emit(event: EVENT_TYPE): Promise<void>;
      updateReference(parentProcessId: string, parentProcessIndex: string, name: string, value: any): void;

      /**
       * Delete a Reference that is associated with a Process/SubProcess.
       *
       * @param {string} parentProcessId
       * @param {string} parentProcessIndex
       * @param {string} referenceName
       */
      deleteReference(parentProcessId: string, parentProcessIndex: string, referenceName: string): void;
  }

  /// <reference types="lodash" />
  /**
   * Bpmn Compiler.
   */
  class BpmnCompiler {
    /**
     * Compile a bpmn file
     * @param bpmn the xml content
     */
    compile(bpmn: string): any;
  }

}